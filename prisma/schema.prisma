generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlockCursor {
  id            Int      @id @default(autoincrement())
  eventName     String
  currentHeight Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  address           String              @id @unique(map: "User.address_unique")
  discord           String?
  avatar            String?
  flowns            String?
  name              String?
  votingPower       Float               @default(0.01) @db.Real
  activities        Activity[]
  BallotBuyRecord   BallotBuyRecord[]
  memorials         Memorial[]
  TokenChangeRecord TokenChangeRecord[]
  votes             Vote[]
}

model Activity {
  id            Int                      @id @unique(map: "Activity.id_unique")
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  title         String                   @db.VarChar(255)
  metadata      Json
  creatorAddr   String
  content       String?
  startDate     DateTime?
  endDate       DateTime?
  source        String?
  lockDate      DateTime?
  upVote        Int?
  downVote      Int?
  closed        Boolean
  consumed      Boolean
  hidden        Boolean                  @default(false)
  rewardToken   Float?                   @db.Real
  absTotalPower Float?                   @db.Real
  bouns         Float?                   @db.Real
  creator       User                     @relation(fields: [creatorAddr], references: [address], onDelete: Cascade)
  categories    CategoriesOnActivities[]
  memorials     Memorial[]
  voteResult    Vote[]
}

model Category {
  id         Int                      @id @default(autoincrement())
  type       ActivityType             @unique(map: "Category.type_unique")
  activities CategoriesOnActivities[]
}

model CategoriesOnActivities {
  activityId Int
  categoryId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([activityId, categoryId])
}

model Vote {
  id         Int      @default(autoincrement())
  voterAddr  String
  isUpVote   Boolean  @default(true)
  power      Float    @default(1.0) @db.Real
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  voter      User     @relation(fields: [voterAddr], references: [address], onDelete: Cascade)

  @@unique([voterAddr, activityId], map: "Vote.voterAddr_activityId_unique")
  @@unique([voterAddr, activityId])
}

model EconomicFactor {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  createConsumption   Float    @default(100.0) @db.Real
  maxRatio            Float    @default(5.0) @db.Real
  minRatio            Float    @default(1.0) @db.Real
  averageRatio        Float    @default(1.5) @db.Real
  asymmetry           Float    @default(2.0) @db.Real
  recentN             Int      @default(10)
  ballotPrice         Float    @default(1.0) @db.Real
  ballotMinPrice      Float    @default(1.0) @db.Real
  recentAvgTotalPower Float    @default(0.0) @db.Real
  bounsRatio          Float    @default(0.01) @db.Real
}

model Memorial {
  ownerAddress     String
  id               Int      @id @unique(map: "Memorial.id_unique")
  version          Int
  seriesNumber     Int
  circulatingCount Int
  activityId       Int
  mintedAt         DateTime @default(now())
  isPositive       Boolean
  bonus            Float    @db.Real
  activity         Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  owner            User     @relation(fields: [ownerAddress], references: [address], onDelete: Cascade)
}

model BallotBuyRecord {
  id           Int      @id @default(autoincrement())
  amount       Int
  buyerAddress String
  price        Float    @db.Real
  createdAt    DateTime @default(now())
  buyer        User     @relation(fields: [buyerAddress], references: [address], onDelete: Cascade)
}

model TokenChangeRecord {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  type        TokenChangeType
  amount      Float           @db.Real
  userAddress String
  comment     String?
  user        User            @relation(fields: [userAddress], references: [address], onDelete: Cascade)
}

model Faucet {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  address   String
}

model ServerStatus {
  maintenance Boolean @unique @default(false)
}

enum TokenChangeType {
  BuyBallot
  CreateActivity
  RewardByActivity
  Airdrop
}

enum ActivityType {
  Interact
  Meeting
  Vote
  Claim
  Whitelist
  Mint
  Create
  LuckDraw
  Learn
  Node
  Test
  Develop
  Register
  Form
  IXO
  Other
  Airdrop
}
